// Signature file for parser generated by fsyacc
module Scheme.Parser
type token =
  | EOF
  | REAL of (float)
  | INT of (int)
  | SYMBOL of (string)
  | STRING of (string)
  | UNQUOTE
  | QUASIQUOTE
  | QUOTE
  | DOT
  | CLOSE_BRACKET
  | OPEN_BRACKET
  | CLOSE_PAREN
  | OPEN_PAREN
type tokenId =
    | TOKEN_EOF
    | TOKEN_REAL
    | TOKEN_INT
    | TOKEN_SYMBOL
    | TOKEN_STRING
    | TOKEN_UNQUOTE
    | TOKEN_QUASIQUOTE
    | TOKEN_QUOTE
    | TOKEN_DOT
    | TOKEN_CLOSE_BRACKET
    | TOKEN_OPEN_BRACKET
    | TOKEN_CLOSE_PAREN
    | TOKEN_OPEN_PAREN
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId =
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_list_body
    | NONTERM_proper_list_body
    | NONTERM_value
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (SExprView list)
