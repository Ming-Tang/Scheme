// Implementation file for parser generated by fsyacc
module Scheme.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Scheme.Lexer

/// Parse tree of an S-expression
type SExprView =
| NilV
| IntV of int
| RealV of float
| StrV of string
| SymV of string
| QuoteV of SExprView
| QuasiquoteV of SExprView
| UnquoteV of SExprView
| ProperListV of SExprView list
| DottedListV of SExprView list * SExprView


# 24 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | REAL of (float)
  | INT of (int)
  | SYMBOL of (string)
  | STRING of (string)
  | UNQUOTE
  | QUASIQUOTE
  | QUOTE
  | DOT
  | CLOSE_BRACKET
  | OPEN_BRACKET
  | CLOSE_PAREN
  | OPEN_PAREN
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_REAL
    | TOKEN_INT
    | TOKEN_SYMBOL
    | TOKEN_STRING
    | TOKEN_UNQUOTE
    | TOKEN_QUASIQUOTE
    | TOKEN_QUOTE
    | TOKEN_DOT
    | TOKEN_CLOSE_BRACKET
    | TOKEN_OPEN_BRACKET
    | TOKEN_CLOSE_PAREN
    | TOKEN_OPEN_PAREN
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_list_body
    | NONTERM_proper_list_body
    | NONTERM_value

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | REAL _ -> 1 
  | INT _ -> 2 
  | SYMBOL _ -> 3 
  | STRING _ -> 4 
  | UNQUOTE  -> 5 
  | QUASIQUOTE  -> 6 
  | QUOTE  -> 7 
  | DOT  -> 8 
  | CLOSE_BRACKET  -> 9 
  | OPEN_BRACKET  -> 10 
  | CLOSE_PAREN  -> 11 
  | OPEN_PAREN  -> 12 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_REAL 
  | 2 -> TOKEN_INT 
  | 3 -> TOKEN_SYMBOL 
  | 4 -> TOKEN_STRING 
  | 5 -> TOKEN_UNQUOTE 
  | 6 -> TOKEN_QUASIQUOTE 
  | 7 -> TOKEN_QUOTE 
  | 8 -> TOKEN_DOT 
  | 9 -> TOKEN_CLOSE_BRACKET 
  | 10 -> TOKEN_OPEN_BRACKET 
  | 11 -> TOKEN_CLOSE_PAREN 
  | 12 -> TOKEN_OPEN_PAREN 
  | 15 -> TOKEN_end_of_input
  | 13 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_list_body 
    | 3 -> NONTERM_list_body 
    | 4 -> NONTERM_list_body 
    | 5 -> NONTERM_list_body 
    | 6 -> NONTERM_list_body 
    | 7 -> NONTERM_proper_list_body 
    | 8 -> NONTERM_proper_list_body 
    | 9 -> NONTERM_proper_list_body 
    | 10 -> NONTERM_value 
    | 11 -> NONTERM_value 
    | 12 -> NONTERM_value 
    | 13 -> NONTERM_value 
    | 14 -> NONTERM_value 
    | 15 -> NONTERM_value 
    | 16 -> NONTERM_value 
    | 17 -> NONTERM_value 
    | 18 -> NONTERM_value 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 15 
let _fsyacc_tagOfErrorTerminal = 13

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | REAL _ -> "REAL" 
  | INT _ -> "INT" 
  | SYMBOL _ -> "SYMBOL" 
  | STRING _ -> "STRING" 
  | UNQUOTE  -> "UNQUOTE" 
  | QUASIQUOTE  -> "QUASIQUOTE" 
  | QUOTE  -> "QUOTE" 
  | DOT  -> "DOT" 
  | CLOSE_BRACKET  -> "CLOSE_BRACKET" 
  | OPEN_BRACKET  -> "OPEN_BRACKET" 
  | CLOSE_PAREN  -> "CLOSE_PAREN" 
  | OPEN_PAREN  -> "OPEN_PAREN" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | REAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SYMBOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNQUOTE  -> (null : System.Object) 
  | QUASIQUOTE  -> (null : System.Object) 
  | QUOTE  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | CLOSE_BRACKET  -> (null : System.Object) 
  | OPEN_BRACKET  -> (null : System.Object) 
  | CLOSE_PAREN  -> (null : System.Object) 
  | OPEN_PAREN  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 14us; 15us; 17us; 18us; 24us; 25us; 26us; 27us; 28us; 29us; 6us; 65535us; 0us; 2us; 14us; 9us; 17us; 9us; 24us; 9us; 26us; 9us; 28us; 9us; 11us; 65535us; 0us; 12us; 2us; 13us; 5us; 6us; 7us; 8us; 9us; 13us; 10us; 11us; 14us; 4us; 17us; 4us; 24us; 4us; 26us; 4us; 28us; 4us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 16us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 9us; 1us; 1us; 3us; 3us; 5us; 8us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 3us; 4us; 6us; 9us; 1us; 4us; 1us; 4us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 13us; 15us; 17us; 19us; 21us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; |]
let _fsyacc_action_rows = 30
let _fsyacc_actionTableElements = [|9us; 16391us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 10us; 17us; 12us; 14us; 0us; 49152us; 10us; 32768us; 0us; 3us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 10us; 17us; 12us; 14us; 0us; 16385us; 1us; 16389us; 8us; 5us; 9us; 32768us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 10us; 17us; 12us; 14us; 1us; 32768us; 8us; 7us; 9us; 32768us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 10us; 17us; 12us; 14us; 0us; 16387us; 10us; 16390us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 8us; 10us; 10us; 17us; 12us; 14us; 9us; 32768us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 10us; 17us; 12us; 14us; 0us; 16388us; 0us; 16392us; 0us; 16393us; 10us; 16386us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 8us; 16391us; 10us; 17us; 12us; 14us; 1us; 32768us; 11us; 16us; 0us; 16394us; 10us; 16386us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 8us; 16391us; 10us; 17us; 12us; 14us; 1us; 32768us; 9us; 19us; 0us; 16395us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 9us; 16386us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 10us; 17us; 12us; 14us; 0us; 16400us; 9us; 16386us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 10us; 17us; 12us; 14us; 0us; 16401us; 9us; 16386us; 1us; 23us; 2us; 22us; 3us; 21us; 4us; 20us; 5us; 28us; 6us; 26us; 7us; 24us; 10us; 17us; 12us; 14us; 0us; 16402us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 10us; 11us; 22us; 23us; 25us; 35us; 37us; 47us; 48us; 59us; 69us; 70us; 71us; 72us; 83us; 85us; 86us; 97us; 99us; 100us; 101us; 102us; 103us; 104us; 114us; 115us; 125us; 126us; 136us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 5us; 3us; 1us; 1us; 0us; 1us; 2us; 3us; 3us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 16388us; 16392us; 16393us; 65535us; 65535us; 16394us; 65535us; 65535us; 16395us; 16396us; 16397us; 16398us; 16399us; 65535us; 16400us; 65535us; 16401us; 65535us; 16402us; |]
let _fsyacc_reductions ()  =    [| 
# 173 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : SExprView list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 182 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'proper_list_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                   _1 
                   )
# 39 "Parser.fsy"
                 : SExprView list));
# 193 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                         NilV 
                   )
# 47 "Parser.fsy"
                 : 'list_body));
# 203 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                   ProperListV [_3; _1; _5] 
                   )
# 48 "Parser.fsy"
                 : 'list_body));
# 216 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'proper_list_body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                    DottedListV(_1, _3) 
                   )
# 49 "Parser.fsy"
                 : 'list_body));
# 228 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                               ProperListV [_1] 
                   )
# 50 "Parser.fsy"
                 : 'list_body));
# 239 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'proper_list_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                          ProperListV _1 
                   )
# 51 "Parser.fsy"
                 : 'list_body));
# 250 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                         [] 
                   )
# 54 "Parser.fsy"
                 : 'proper_list_body));
# 260 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                               [_1] 
                   )
# 55 "Parser.fsy"
                 : 'proper_list_body));
# 271 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'proper_list_body)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                _1 @ [_2] 
                   )
# 56 "Parser.fsy"
                 : 'proper_list_body));
# 283 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                          _2 
                   )
# 59 "Parser.fsy"
                 : 'value));
# 294 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                              _2 
                   )
# 60 "Parser.fsy"
                 : 'value));
# 305 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                StrV _1 
                   )
# 61 "Parser.fsy"
                 : 'value));
# 316 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                SymV _1 
                   )
# 62 "Parser.fsy"
                 : 'value));
# 327 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                             IntV _1 
                   )
# 63 "Parser.fsy"
                 : 'value));
# 338 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                              RealV _1 
                   )
# 64 "Parser.fsy"
                 : 'value));
# 349 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                         QuoteV _2 
                   )
# 65 "Parser.fsy"
                 : 'value));
# 360 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                              QuasiquoteV _2 
                   )
# 66 "Parser.fsy"
                 : 'value));
# 371 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'list_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                           UnquoteV _2 
                   )
# 67 "Parser.fsy"
                 : 'value));
|]
# 383 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 16;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : SExprView list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
