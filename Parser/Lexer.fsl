{
module Scheme.Lexer
open Microsoft.FSharp.Text.Lexing
open System
open Parser

type Token =
| OPEN_PAREN
| CLOSE_PAREN
| OPEN_BRACKET
| CLOSE_BRACKET
| DOT
| QUOTE
| QUASIQUOTE
| UNQUOTE
| STRING of string
| SYMBOL of string
| INT of int
| REAL of float
| EOF

let lexeme = LexBuffer<Token>.LexemeString

let inline newline (lexbuf: LexBuffer<Token>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let sign = ['-' '+']
let digit = ['0'-'9']

let int = sign? digit+
let frac = '.' digit*
let exp = ['e' 'E'] sign? digit+
let real = sign? digit* frac? exp?

let ws = [' ' '\t' '\r' '\n']+
let comment = ';' [^'\r' '\n']*
let sym = [^'(' ')' '[' ']' '{' '}' '"' ',' '\'' '`' ';' '#' '|' '\\']+
// not ident: ( ) [ ] { } " , ' ` ; # | \

rule read =
  parse
  | ws      { read lexbuf }
  | comment { read lexbuf }
  | '.'     { DOT }
  | '\''    { QUOTE }
  | '`'     { QUASIQUOTE }
  | ','     { UNQUOTE }
  | '('     { OPEN_PAREN }
  | ')'     { CLOSE_PAREN }
  | '['     { OPEN_BRACKET }
  | ']'     { CLOSE_BRACKET }
  | '"'     { readString [] false lexbuf }
  | int     { INT (int (lexeme lexbuf)) }
  | real    { REAL (float (lexeme lexbuf)) }
  | sym     { SYMBOL (lexeme lexbuf) }
  | eof     { EOF }
  | _       { failwithf "Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line+1) lexbuf.StartPos.Column }
and readString cs inEscape =
  parse
  | '\\'         { readString cs true lexbuf }
  | '"'          { if inEscape then readString ("\""::cs) false lexbuf
                   else STRING (List.rev cs |> String.concat "") }
  | [^ '"' '\\'] { readString ((lexeme lexbuf) :: cs) false lexbuf }
  | eof          { failwith "Unterminated string literal." }

